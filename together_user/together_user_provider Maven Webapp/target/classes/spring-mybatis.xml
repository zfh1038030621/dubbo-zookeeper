<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" init-method="init">
	<!-- 基本属性 url、user、password -->  
	<property name="driverClassName" value="${driverClassName}" />  
     <property name="url" value="${url}" />  
     <property name="username" value="${username}" />  
     <!-- 配置初始化大小、最小、最大 -->  
     <property name="initialSize" value="5" />  
     <property name="minIdle" value="5" />   
     <property name="maxActive" value="20" />      
     <!-- 配置获取连接等待超时的时间 -->  
     <property name="maxWait" value="600000" />      
     <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
     <property name="timeBetweenEvictionRunsMillis" value="300000" />      
     <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
     <property name="minEvictableIdleTimeMillis" value="300000" />  
     
    
     <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
     <property name="filters" value="stat" />   
 </bean>  

	<!-- 2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		  <property name="mapperLocations" value="classpath*:together/user/provider/mapper/xml/*Mapper.xml" /> 
	</bean>

	<!-- 3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory 
		basePackage:指定sql映射文件/接口所在的包（自动扫描） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="together.user.provider.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		
	</bean>

	<!-- 4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 5. 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<tx:annotation-driven transaction-manager="txManager" />

</beans>  

